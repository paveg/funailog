---
import type { PaginateFunction } from 'astro';

import {
  CalendarIcon,
  ChatBubbleIcon,
  HeartIcon,
  ReloadIcon,
} from '@radix-ui/react-icons';

import { Badge } from '@/components/ui/badge';
import { defaultLang } from '@/i18n/ui';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import Layout from '@/layouts/Layout.astro';
import Pagination from '@/components/AstroPagination.astro';

export type Props = {
  page: Page<ZennArticle[]>;
};

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const res = await fetch('https://zenn.dev/api/articles?username=pav');
  const data: ZennArticles = await res.json();
  const allPosts = data.articles;
  const posts: ZennArticle[] = allPosts
    .sort(
      (a, b) =>
        Date.parse(a.body_updated_at ?? a.published_at) -
        Date.parse(b.body_updated_at ?? b.published_at),
    )
    .reverse();

  return paginate(posts, { pageSize: 5 });
}

const { page } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout
  title={`${t('zenn.index')} | ${t('main.title')}`}
  description={t('zenn.description')}
  path="/zenn"
  lang={lang}
  og={{
    enabled: true,
  }}
  hreflangs={[
    { path: `/zenn`, hreflang: defaultLang },
    { path: '/zenn', hreflang: 'x-default' },
  ]}
>
  <main>
    <ul class="space-y-4 pb-4">
      {
        page.data.map((post) => {
          return (
            <li key={post.id}>
              <article>
                <div class="rounded-md p-4 shadow-accent hover:-top-3 hover:shadow-md dark:shadow-accent-foreground">
                  <a
                    href={`https://zenn.dev/pav/articles/${post.slug}`}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <div class="flex items-center justify-start gap-3">
                      <time
                        class="flex items-center justify-start gap-2"
                        datetime={post.published}
                      >
                        {post.body_updated_at ? (
                          <ReloadIcon className="size-4" />
                        ) : (
                          <CalendarIcon className="size-4" />
                        )}
                        {new Intl.DateTimeFormat('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                        }).format(
                          Date.parse(post.body_updated_at ?? post.published),
                        )}
                      </time>
                      <Badge className="capitalize" variant="outline">
                        {post.article_type}
                      </Badge>
                    </div>
                    <div class="pb-3">
                      <h2 class="items-center">
                        {post.title} {post.emoji}
                      </h2>
                      <div class="flex justify-start gap-3">
                        <span class="flex items-center gap-2">
                          <HeartIcon className="size-5" />
                          {post.liked_count}
                        </span>
                        <span class="flex items-center gap-2">
                          <ChatBubbleIcon className="size-5" />
                          {post.comments_count}
                        </span>
                      </div>
                    </div>
                  </a>
                </div>
              </article>
            </li>
          );
        })
      }
    </ul>
    <Pagination page={page} />
  </main>
</Layout>
