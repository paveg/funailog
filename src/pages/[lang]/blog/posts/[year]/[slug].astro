---
import '@/styles/articles.css';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import { getEntry } from 'astro:content';

import { CalendarIcon, ClockIcon, ReloadIcon } from '@radix-ui/react-icons';

import Figure from '@/components/Figure.astro';
import Link from '@/components/Link.astro';
import { Separator } from '@/components/ui/separator';
import { defaultLang } from '@/i18n/ui';
import Layout from '@/layouts/Layout.astro';

export type Props = {
  post: CollectionEntry<'blog'>;
  lang: string;
};

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  const paths = posts
    .filter((post) => {
      const [lang] = post.slug.split('/');
      return defaultLang !== lang;
    })
    .map((post) => {
      const [lang, year, slug] = post.slug.split('/');
      return {
        params: {
          lang,
          year,
          slug,
        },
        props: { post, lang },
      };
    });

  return paths;
}
const { Content, remarkPluginFrontmatter } = await Astro.props.post.render();
const { post, lang } = Astro.props;
const components = {
  figure: Figure,
  a: Link,
};
const meta = await getEntry('site', 'meta');
---

<Layout
  title={`${meta.data.index.title}`}
  description={post.data.description}
  path={`${post.collection}/posts/${post.slug}`}
  og={{ enabled: false }}
  lang={lang}
  ><main>
    <article>
      <h1>{post.data.title}</h1>
      {
        post.data.heroImage && (
          <img src={post.data.heroImage} alt={post.data.heroImage} />
        )
      }
      <div class="mb-2 flex items-center justify-between gap-2 text-sm">
        {
          post.data.lastUpdated ? (
            <>
              <time
                class="flex items-center gap-1"
                id="lastUpdated"
                datetime={post.data.lastUpdated.toISOString()}
              >
                <ReloadIcon className="my-0 size-4" />

                {new Intl.DateTimeFormat('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                }).format(post.data.lastUpdated || post.data.published)}
              </time>
            </>
          ) : (
            <time
              class="flex items-center gap-1"
              id="published"
              datetime={post.data.published.toISOString()}
            >
              <CalendarIcon className="my-0 size-4" />
              {new Intl.DateTimeFormat('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
              }).format(post.data.published)}
            </time>
          )
        }
        <span class="flex items-center gap-1">
          <ClockIcon className="my-0 size-4" />
          {remarkPluginFrontmatter.minRead}
        </span>
      </div>
      <Separator />
      <Content components={components} />
    </article>
  </main>
</Layout>
