---
import '@/styles/articles.css';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import { CalendarIcon, ClockIcon, ReloadIcon } from '@radix-ui/react-icons';

import Figure from '@/components/Figure.astro';
import Link from '@/components/Link.astro';
import { Separator } from '@/components/ui/separator';
import { defaultLang, ui } from '@/i18n/ui';
import { useTranslatedPath, useTranslations } from '@/i18n/utils';
import { getLangFromUrl } from '@/i18n/utils';
import Layout from '@/layouts/Layout.astro';

export type Props = {
  post: CollectionEntry<'blog'>;
};

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  const paths = posts.map((post) => {
    const [lang, ...slug] = post.slug.split('/');
    const translatePath = useTranslatedPath(lang as keyof typeof ui);
    return {
      params: {
        slug: translatePath(slug.join('/')),
      },
      props: { post },
    };
  });
  return paths;
}
const { Content, remarkPluginFrontmatter } = await Astro.props.post.render();
const { post } = Astro.props;
const components = {
  figure: Figure,
  a: Link,
};
const site = Astro.site ?? '';
const globalLang = getLangFromUrl(Astro.url);
const [, ...slug] = post.slug.split('/');
const translatePath = useTranslatedPath(globalLang);
const path = `${post.collection}/${translatePath(slug.join('/'))}`;
const t = useTranslations(globalLang);
---

<Layout
  title={`${post.data.title} | ${t('main.title')}`}
  description={post.data.description}
  path={path}
  og={{
    enabled: true,
    width: 1200,
    height: 630,
    image: new URL(`/api/og/article/${post.collection}/${post.slug}.png`, site),
    type: 'article',
  }}
  hreflangs={[
    { path: `${path}`, hreflang: defaultLang },
    { path: `${path}`, hreflang: 'x-default' },
  ]}
  ><main>
    <article>
      <h1>{post.data.title}</h1>
      {
        post.data.heroImage && (
          <img src={post.data.heroImage} alt={post.data.heroImage} />
        )
      }
      <div class="mb-2 flex items-end justify-between gap-2 text-sm">
        <span>
          {
            post.data.lastUpdated && (
              <time
                class="flex items-center gap-1"
                id="lastUpdated"
                datetime={post.data.lastUpdated.toISOString()}
              >
                <ReloadIcon className="my-0 size-4" />
                {new Intl.DateTimeFormat('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                }).format(post.data.lastUpdated)}
              </time>
            )
          }
          <time
            class="flex items-center gap-1"
            id="published"
            datetime={post.data.published.toISOString()}
          >
            <CalendarIcon className="my-0 size-4" />
            {
              new Intl.DateTimeFormat('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
              }).format(post.data.published)
            }
          </time>
        </span>
        <span class="flex items-center gap-1">
          <ClockIcon className="my-0 size-4" />
          {remarkPluginFrontmatter.minRead}
        </span>
      </div>
      <Separator />
      <Content components={components} />
    </article>
  </main>
</Layout>
