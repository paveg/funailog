---
import type { Page } from 'astro';
import type { CollectionEntry } from 'astro:content';

import Pagination from '@/components/AstroPagination.astro';
import { DateComponent } from '@/components/date';
import { LanguageToggle } from '@/components/language-toggle';
import { TagsComponent } from '@/components/markdown/tags';
import NotFound from '@/components/NotFound.astro';
import { Badge } from '@/components/ui/badge';
import { showDefaultLang, defaultLang } from '@/i18n/ui';
import { exactSlugPath, getLangFromUrl } from '@/i18n/utils';

export type Props = {
  page: Page<CollectionEntry<'blog'>>;
  title?: string;
};
const { page, title } = Astro.props;
const url = Astro.url;
const lang = getLangFromUrl(url);
---

<>
  <div class="py-4">
    <div class="flex items-center justify-between pb-8">
      {title && <h1 class="capitalize">{title}</h1>}
      <LanguageToggle
        client:load
        lang={lang}
        pathname={url.pathname}
        collectionName="blog"
      />
    </div>
    <ul class="space-y-8">
      {
        page.data.length === 0 ? (
          <NotFound />
        ) : (
          page.data.map((post) => {
            const { slug, data, collection } = post;
            const tags = data.tags ?? [];
            const path = exactSlugPath(slug);
            return (
              <li>
                <article>
                  <span class="flex items-center justify-start gap-2 align-middle">
                    <a
                      class="pb-0.5"
                      href={
                        !showDefaultLang && lang === defaultLang
                          ? `/${collection}/categories/${data.category}`
                          : `/${collection}/${lang}/categories/${data.category}`
                      }
                    >
                      <Badge className="capitalize" variant="secondary">
                        {data.category}
                      </Badge>
                    </a>
                    {post.data.lastUpdated ? (
                      <DateComponent
                        type="updated"
                        date={post.data.lastUpdated}
                      />
                    ) : (
                      <DateComponent
                        type="published"
                        date={post.data.published}
                      />
                    )}
                  </span>
                  <a href={`/${collection}/${path}`}>
                    <h2>{data.title}</h2>
                  </a>
                  <span class="text-xs leading-4 text-muted-foreground md:text-sm">
                    {data.description}
                  </span>
                  {tags.length > 0 && (
                    <TagsComponent
                      tags={tags}
                      lang={lang}
                      collection={collection}
                    />
                  )}
                </article>
              </li>
            );
          })
        )
      }
    </ul>
    <div class="pt-12">
      <Pagination page={page} />
    </div>
  </div>
</>
